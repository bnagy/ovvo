#!/usr/bin/env python

import json
import sys
import os
import logging
import collatinus

logger = logging.getLogger('root')
FORMAT = "<%(filename)s:%(lineno)s> in %(funcName)s ] %(message)s"
logging.basicConfig(format=FORMAT)
logger.setLevel(logging.DEBUG)

def main():
    if len(sys.argv) < 2:
        usage()

    fn = sys.argv[1]

    testfile = fn
    testtag = os.path.splitext(fn)[0] + '.json'

    try:
        with open(testtag,'rb') as fh:
            metadata = json.load(fh)
        with open(testfile,mode='r', encoding='utf-8') as fh:
            contents = fh.read()
    except Exception as e:
        logger.error("Couldn't read files: %s", e)
        exit(1)

    logger.info(" Starting up...")
    logger.info(" Author -[ %s" % metadata['author'])
    logger.info(" Title  -[ %s" % metadata['title'])
    logger.info(" Date   -[ %s" % metadata['date'])
    cl = collatinus.comms.Client()
    parser = collatinus.parse.Parser(cl)

    try:
        results = parser.parse(contents) 
    except Exception as e:
        logger.error(" Failed to parse %s - %s" % (testfile, e))
        logger.exception(e)
        exit(1)

    try:
        percent_sov = results['sov'] / (results['qual'] - results['none'] - results['both'])
        percent_svo = results['svo'] / (results['qual'] - results['none'] - results['both'])
        percent_error = (results['none'] + results['both']) / results['qual']
        percent_qual = results['qual'] / contents.count('\n')
    except:
        logger.error(" Failed while calculating percentages. Are there qualifying sentences? %s" % results)
        percent_sov = 0
        percent_svo = 0
        percent_error = 0
        percent_qual = 0

    logger.info(" \nDone. %d sentences, %d qualify. (%d%%)\n %d SOV %d SVO, %d SKIP, %d AMBIG.\n %.2f SOV, %.2f SVO, %.2f error." % 
        (contents.count('\n'),
        results['qual'],
        round(percent_qual*100,2),
        results['sov'],
        results['svo'],
        results['none'],
        results['both'],
        round(percent_sov*100, 2),
        round(percent_svo*100, 2),
        round(percent_error*100, 2),
        ))

if __name__ == '__main__':
    main()